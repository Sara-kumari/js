index.js
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
app.use(cors());

const server = http.createServer(app);

// Create a WebSocket server
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // React app URL
    methods: ["GET", "POST"]
  }
});

// When a client connects
io.on("connection", (socket) => {
  console.log(" User connected:", socket.id);

  // Listen for chat messages
  socket.on("send_message", (data) => {
    console.log(" Message:", data);
    // Broadcast to all clients
    io.emit("receive_message", data);
  });

  socket.on("disconnect", () => {
    console.log(" User disconnected:", socket.id);
  });
});

const PORT = 5000;
server.listen(PORT, () => console.log(` Server running on port ${PORT}`));


Run it:

node index.js


Your WebSocket server is live at ws://localhost:5000.

⚛️ Step 2: Frontend Setup

In a separate folder:

npx create-react-app chat-client
cd chat-client
npm install socket.io-client

🗂 src/App.js
import React, { useEffect, useState } from "react";
import { io } from "socket.io-client";

const socket = io("http://localhost:5000"); // connect to backend

function App() {
  const [message, setMessage] = useState("");
  const [chat, setChat] = useState([]);

  useEffect(() => {
    // Listen for incoming messages
    socket.on("receive_message", (data) => {
      setChat((prev) => [...prev, data]);
    });

    // Clean up on unmount
    return () => socket.off("receive_message");
  }, []);

  const sendMessage = (e) => {
    e.preventDefault();
    if (message.trim() === "") return;

    const newMessage = {
      text: message,
      sender: "User-" + Math.floor(Math.random() * 1000),
      time: new Date().toLocaleTimeString()
    };

    socket.emit("send_message", newMessage);
    setMessage("");
  };

  return (
    <div style={{ textAlign: "center", marginTop: "50px" }}>
      <h2>💬 Real-Time Chat</h2>

      <div
        style={{
          border: "1px solid gray",
          height: "300px",
          width: "400px",
          margin: "auto",
          overflowY: "scroll",
          padding: "10px",
          borderRadius: "10px"
        }}
      >
        {chat.map((msg, index) => (
          <p key={index}>
            <strong>{msg.sender}</strong>: {msg.text} <small>({msg.time})</small>
          </p>
        ))}
      </div>

      <form onSubmit={sendMessage} style={{ marginTop: "20px" }}>
        <input
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Type message..."
          style={{
            padding: "10px",
            width: "250px",
            borderRadius: "5px",
            border: "1px solid #ccc"
          }}
        />
        <button
          type="submit"
          style={{
            padding: "10px 20px",
            marginLeft: "10px",
            borderRadius: "5px",
            background: "blue",
            color: "white",
            border: "none"
          }}
        >
          Send
        </button>
      </form>
    </div>
  );
}

export default App;
