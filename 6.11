pip install fastapi uvicorn pyjwt


from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import jwt
from datetime import datetime

app = FastAPI()

# ===== JWT CONFIG =====
SECRET_KEY = "mybanksecret"
ALGORITHM = "HS256"

# ===== LOGGING MIDDLEWARE =====
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    print(f"➡️ Request: {request.method} {request.url.path}")
    
    response = await call_next(request)
    
    duration = (datetime.now() - start_time).total_seconds()
    print(f"⬅️ Response status: {response.status_code} ({duration:.3f}s)")
    return response

# ===== AUTHENTICATION MIDDLEWARE =====
@app.middleware("http")
async def jwt_auth_middleware(request: Request, call_next):
    # Skip login or register endpoints
    if request.url.path in ["/login", "/register"]:
        return await call_next(request)
    
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        return JSONResponse(status_code=401, content={"detail": "Authorization header missing or invalid"})
    
    token = auth_header.split(" ")[1]
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        request.state.user = payload.get("sub")  # store username in request
    except jwt.ExpiredSignatureError:
        return JSONResponse(status_code=401, content={"detail": "Token expired"})
    except jwt.PyJWTError:
        return JSONResponse(status_code=401, content={"detail": "Invalid token"})
    
    return await call_next(request)

# ===== DUMMY ROUTES =====
@app.post("/login")
async def login():
    """Simulate login and return JWT"""
    user = {"username": "john_doe"}
    token = jwt.encode({"sub": user["username"]}, SECRET_KEY, algorithm=ALGORITHM)
    return {"access_token": token, "token_type": "bearer"}

@app.get("/account")
async def get_account(request: Request):
    """Protected route"""
    user = request.state.user  # extracted by middleware
    return {"message": f"Welcome {user}, your balance is ₹10,000"}

@app.get("/public")
async def public_info():
    """Open route (no auth)"""
    return {"info": "This endpoint is public."}








Run the API
uvicorn main:app --reload


curl -X POST http://127.0.0.1:8000/login
